from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.config import Settings
from app.bot.keyboards.main import back_keyboard, main_menu
from app.bot.states import ReleaseStates

router = Router()

MENU_RELEASE = "üéµ –í—ã–ø—É—Å–∫ —Ä–µ–ª–∏–∑–∞"
MENU_DOCS = "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
MENU_CONTACTS = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–¥—Ä—É–≥'}! –Ø PLOV BOT. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
    )


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(lambda m: m.text == MENU_RELEASE)
async def start_release_flow(message: Message, state: FSMContext) -> None:
    await state.set_state(ReleaseStates.track_upload)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV –∏–ª–∏ FLAC –∫–∞–∫ —Ñ–∞–π–ª (document).",
        reply_markup=back_keyboard(),
    )


@router.message(lambda m: m.text == MENU_DOCS)
async def show_docs(message: Message) -> None:
    await message.answer(
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ /docs. –ö—Ä–∞—Ç–∫–æ: README, INSTALL, OPERATIONS, DB, PAYMENT, PRIVACY_CONSENT, CONTRACTS, SECURITY.",
        reply_markup=main_menu(),
    )


@router.message(lambda m: m.text == MENU_CONTACTS)
async def show_contacts(message: Message, settings: Settings) -> None:
    admin_username = settings.admin_username if settings and settings.admin_username else "admin"
    await message.answer(f"–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @{admin_username}", reply_markup=main_menu())
