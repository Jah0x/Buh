from __future__ import annotations

from dataclasses import dataclass

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.config import Settings
from app.bot.handlers.release import prompt_release_services
from app.bot.keyboards.main import (
    BACK_BUTTON,
    back_keyboard,
    courses_keyboard,
    main_menu,
    pc_modes_keyboard,
)
from app.bot.states import MenuStates, PCBuildStates

router = Router()

MENU_MUSIC = "üéµ –ú—É–∑—ã–∫–∞ –∏ —Ä–µ–ª–∏–∑—ã"
MENU_PC = "üíª –°–æ–±—Ä–∞—Ç—å –ü–ö"
MENU_STUDIOS = "üéô –ù–∞—à–∏ —Å—Ç—É–¥–∏–∏"
MENU_COURSES = "üìö –ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ"
MENU_LINKS = "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
MENU_CONTACTS = "üì¨ –°–≤—è–∑—å —Å –Ω–∞–º–∏"

PC_READY = "–ì–æ—Ç–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏"
PC_CUSTOM = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞"

READY_BUILDS = [
    ("–≠–∫–æ–Ω–æ–º", "XX ‚ÇΩ"),
    ("–ú–∏–¥", "XX ‚ÇΩ"),
    ("–ü—Ä–æ", "XX ‚ÇΩ"),
    ("–ü—Ä–æ–¥—é—Å–µ—Ä", "XX ‚ÇΩ"),
    ("Ultimate", "XX ‚ÇΩ"),
]

HELPFUL_LINKS = [
    ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã", "https://t.me/vstplov"),
    ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ–º–ø–ª—ã", "https://t.me/plovsempl"),
    ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—É–±", "https://t.me/plovsoundclub"),
]


@dataclass(frozen=True)
class CourseInfo:
    title: str
    price: str
    link: str


COURSES = [
    CourseInfo("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å FL Studio", "0 ‚ÇΩ", "https://t.me/plovsoundclub"),
    CourseInfo("–ö—É—Ä—Å –ø–æ –∑–≤—É–∫–æ—Ä–µ–∂–∏—Å—Å—É—Ä–µ", "15 510 ‚ÇΩ", "https://t.me/plovsoundclub?course=sound"),
    CourseInfo("–ö—É—Ä—Å –ø–æ –±–∏—Ç–º–µ–π–∫–∏–Ω–≥—É", "22 550 ‚ÇΩ", "https://t.me/plovsoundclub?course=beat"),
    CourseInfo("–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å (–±–∏—Ç–º–µ–π–∫–∏–Ω–≥ + —Å–≤–µ–¥–µ–Ω–∏–µ)", "33 300 ‚ÇΩ", "https://t.me/plovsoundclub?course=full"),
]

COURSE_TITLES = [course.title for course in COURSES]
COURSE_BY_TITLE = {course.title: course for course in COURSES}


@dataclass(frozen=True)
class StudioInfo:
    title: str
    address: str
    description: str


STUDIOS = [
    StudioInfo(
        "PLOV Studio ‚Äî –¶–µ–Ω—Ç—Ä",
        "–ú–æ—Å–∫–≤–∞, –º. –ö—É—Ä—Å–∫–∞—è",
        "–§–ª–∞–≥–º–∞–Ω—Å–∫–∞—è —Å—Ç—É–¥–∏—è —Å –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–π –≤–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–Ω–æ–π –∑–æ–Ω–æ–π.",
    ),
    StudioInfo(
        "PLOV Studio ‚Äî –Æ–≥",
        "–ú–æ—Å–∫–≤–∞, –º. –¢—É–ª—å—Å–∫–∞—è",
        "–£—é—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–æ–∫–∞–ª–∞, –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏—Ç–æ–≤.",
    ),
    StudioInfo(
        "PLOV Studio ‚Äî –°–µ–≤–µ—Ä",
        "–ú–æ—Å–∫–≤–∞, –º. –°–∞–≤—ë–ª–æ–≤—Å–∫–∞—è",
        "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—É–¥–∏—è —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥.",
    ),
]


def _pc_intro_text() -> str:
    lines = ["–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏ –ü–ö:"]
    lines.append("‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏ ‚Äî –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞")
    lines.append("‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∑–∞–¥–∞—á–∞—Ö, –∏ –º—ã –ø–æ–º–æ–∂–µ–º")
    return "\n".join(lines)


def _ready_builds_text() -> str:
    lines = ["–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ç–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏:"]
    for name, price in READY_BUILDS:
        lines.append(f"‚Ä¢ {name} ‚Äî {price}")
    lines.append("")
    lines.append("–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏ @BAXSNAKE.")
    return "\n".join(lines)


def _courses_intro_text() -> str:
    lines = ["–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:"]
    for course in COURSES:
        lines.append(f"‚Ä¢ {course.title} ‚Äî {course.price}")
    lines.append("")
    lines.append("–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –∑–∞—è–≤–∫–æ–π.")
    return "\n".join(lines)


def _studios_text() -> str:
    lines = ["üéô –ù–∞—à–∏ —Å—Ç—É–¥–∏–∏ –ø–æ –ú–æ—Å–∫–≤–µ:"]
    for studio in STUDIOS:
        lines.append("")
        lines.append(studio.title)
        lines.append(f"–ê–¥—Ä–µ—Å: {studio.address}")
        lines.append(studio.description)
        lines.append("–£—Å–ª—É–≥–∏:")
        lines.append("‚Ä¢ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ ‚Äî 3000 ‚ÇΩ / —á–∞—Å")
        lines.append("‚Ä¢ –°–≤–µ–¥–µ–Ω–∏–µ –º–∏–∫—Å–∞ ‚Äî –æ—Ç 40 000 ‚ÇΩ")
        lines.append("‚Ä¢ –°–≤–µ–¥–µ–Ω–∏–µ (–±–∏—Ç + –≥–æ–ª–æ—Å) ‚Äî –æ—Ç 10 000 ‚ÇΩ")
        lines.append("‚Ä¢ –ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ / –±–∏—Ç ‚Äî –æ—Ç 55 555 –¥–æ 222 222 ‚ÇΩ")
        lines.append("‚Ä¢ –û–±–ª–æ–∂–∫–∞ PRO ‚Äî 5555 ‚ÇΩ")
        lines.append("‚Ä¢ –û–±–ª–æ–∂–∫–∞ LIGHT (–ò–ò) ‚Äî 2222 ‚ÇΩ")
        lines.append("‚Ä¢ –ì–æ—Å—Ç—Ä–∞–π—Ç–∏–Ω–≥ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
    lines.append("")
    lines.append("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å—Ç—É–¥–∏–µ–π ‚Üí @BAXSNAKE")
    return "\n".join(lines)


def _links_text() -> str:
    lines = ["–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"]
    for title, url in HELPFUL_LINKS:
        lines.append(f"‚Ä¢ {title} ‚Üí {url}")
    return "\n".join(lines)


def _course_selected_text(course: CourseInfo) -> str:
    lines = [course.title]
    lines.append(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {course.price}")
    lines.append(f"–û—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å ‚Üí {course.link}")
    lines.append("–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É –∏ Telegram Stars.")
    return "\n".join(lines)


def _contact_text(settings: Settings) -> str:
    admin = settings.admin_username or "BAXSNAKE"
    lines = ["üì¨ –°–≤—è–∑—å —Å –Ω–∞–º–∏:"]
    lines.append(f"Telegram: @{admin}")
    lines.append("–ü–æ–¥–ø–∏—Å–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ ‚Äî —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É –∏ Telegram Stars.")
    return "\n".join(lines)


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–¥—Ä—É–≥'}! –Ø PLOV BOT. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
    )


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(F.text == MENU_MUSIC)
async def menu_music(message: Message, state: FSMContext) -> None:
    await state.clear()
    await prompt_release_services(message, state)


@router.message(F.text == MENU_PC)
async def menu_pc(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(MenuStates.pc)
    await message.answer(_pc_intro_text(), reply_markup=pc_modes_keyboard())


@router.message(MenuStates.pc, F.text == BACK_BUTTON)
async def menu_pc_back(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(MenuStates.pc, F.text == PC_READY)
async def menu_pc_ready(message: Message) -> None:
    await message.answer(_ready_builds_text(), reply_markup=pc_modes_keyboard())


@router.message(MenuStates.pc, F.text == PC_CUSTOM)
async def menu_pc_custom(message: Message, state: FSMContext) -> None:
    await state.set_state(PCBuildStates.budget)
    await message.answer("–£–∫–∞–∂–∏ –±—é–¥–∂–µ—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏.", reply_markup=back_keyboard())


@router.message(PCBuildStates.budget, F.text == BACK_BUTTON)
async def pc_budget_back(message: Message, state: FSMContext) -> None:
    await state.set_state(MenuStates.pc)
    await message.answer(_pc_intro_text(), reply_markup=pc_modes_keyboard())


@router.message(PCBuildStates.budget)
async def pc_budget(message: Message, state: FSMContext) -> None:
    if not message.text:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=back_keyboard())
        return
    await state.update_data(pc_budget=message.text.strip())
    await state.set_state(PCBuildStates.goals)
    await message.answer("–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –ü–ö? –£–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–º—É–∑—ã–∫–∞, –≤–∏–¥–µ–æ, –∏–≥—Ä—ã, –ø—Ä–æ–¥–∞–∫—à–Ω).", reply_markup=back_keyboard())


@router.message(PCBuildStates.goals, F.text == BACK_BUTTON)
async def pc_goals_back(message: Message, state: FSMContext) -> None:
    await state.set_state(PCBuildStates.budget)
    await message.answer("–£–∫–∞–∂–∏ –±—é–¥–∂–µ—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏.", reply_markup=back_keyboard())


@router.message(PCBuildStates.goals)
async def pc_goals(message: Message, state: FSMContext) -> None:
    if not message.text:
        await message.answer("–û–ø–∏—à–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ü–ö.", reply_markup=back_keyboard())
        return
    await state.update_data(pc_goals=message.text.strip())
    await state.set_state(PCBuildStates.wishes)
    await message.answer("–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º –∏–ª–∏ –±—Ä–µ–Ω–¥–∞–º?", reply_markup=back_keyboard())


@router.message(PCBuildStates.wishes, F.text == BACK_BUTTON)
async def pc_wishes_back(message: Message, state: FSMContext) -> None:
    await state.set_state(PCBuildStates.goals)
    await message.answer("–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –ü–ö? –£–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏.", reply_markup=back_keyboard())


@router.message(PCBuildStates.wishes)
async def pc_wishes(message: Message, state: FSMContext) -> None:
    if not message.text:
        await message.answer("–î–æ–±–∞–≤—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'.", reply_markup=back_keyboard())
        return
    await state.update_data(pc_wishes=message.text.strip())
    data = await state.get_data()
    summary = [
        "üíª –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞",
        f"–ë—é–¥–∂–µ—Ç: {data.get('pc_budget', '')}",
        f"–ó–∞–¥–∞—á–∏: {data.get('pc_goals', '')}",
        f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {data.get('pc_wishes', '')}",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –ø–æ–º–æ–∂–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å @BAXSNAKE.",
    ]
    await state.set_state(MenuStates.pc)
    await message.answer("\n".join(summary), reply_markup=pc_modes_keyboard())


@router.message(F.text == MENU_COURSES)
async def menu_courses(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(MenuStates.courses)
    await message.answer(_courses_intro_text(), reply_markup=courses_keyboard(COURSE_TITLES))


@router.message(MenuStates.courses, F.text == BACK_BUTTON)
async def menu_courses_back(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(MenuStates.courses)
async def menu_course_select(message: Message) -> None:
    course = COURSE_BY_TITLE.get(message.text or "")
    if not course:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=courses_keyboard(COURSE_TITLES))
        return
    await message.answer(_course_selected_text(course), reply_markup=courses_keyboard(COURSE_TITLES))


@router.message(F.text == MENU_STUDIOS)
async def menu_studios(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(MenuStates.studios)
    await message.answer(_studios_text(), reply_markup=back_keyboard())


@router.message(MenuStates.studios, F.text == BACK_BUTTON)
async def menu_studios_back(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(F.text == MENU_LINKS)
async def menu_links(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(MenuStates.links)
    await message.answer(_links_text(), reply_markup=back_keyboard())


@router.message(MenuStates.links, F.text == BACK_BUTTON)
async def menu_links_back(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@router.message(F.text == MENU_CONTACTS)
async def menu_contacts(message: Message, state: FSMContext, settings: Settings) -> None:
    await state.clear()
    await message.answer(_contact_text(settings), reply_markup=main_menu())


__all__ = [
    "MENU_MUSIC",
    "MENU_PC",
    "MENU_STUDIOS",
    "MENU_COURSES",
    "MENU_LINKS",
    "MENU_CONTACTS",
]
